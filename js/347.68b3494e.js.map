{"version":3,"file":"js/347.68b3494e.js","mappings":"YACAA,KAAKC,UAAYC,eAAeC,GAC9B,MAAM,KAAEC,EAAI,WAAEC,EAAU,IAAEC,GAAQH,EAAEI,KAEpC,GAAa,YAATH,EACF,IACE,MAAMI,QAAiBC,MAAMH,GACvBI,QAAkBF,EAASG,OAGjCX,KAAKY,OAASZ,KAAKY,QAAU,IAAIC,IACjCb,KAAKY,OAAOE,IAAIT,EAAYK,GAG5BV,KAAKe,YAAY,CACfX,KAAM,kBACNC,aACAW,SAAS,GAEb,CAAE,MAAOC,GAEPjB,KAAKe,YAAY,CACfX,KAAM,kBACNC,aACAW,SAAS,EACTC,MAAOA,EAAMC,SAEjB,CAEJ,C","sources":["webpack://no1ott-vujs/./src/components/preloadWorker.js"],"sourcesContent":["// Web Worker for background preloading of video chunks\nself.onmessage = async function(e) {\n  const { type, chunkIndex, url } = e.data;\n  \n  if (type === 'preload') {\n    try {\n      const response = await fetch(url);\n      const chunkData = await response.blob();\n      \n      // Store the chunk data in memory\n      self.chunks = self.chunks || new Map();\n      self.chunks.set(chunkIndex, chunkData);\n      \n      // Send success message back to main thread\n      self.postMessage({\n        type: 'preloadComplete',\n        chunkIndex,\n        success: true\n      });\n    } catch (error) {\n      // Send error message back to main thread\n      self.postMessage({\n        type: 'preloadComplete',\n        chunkIndex,\n        success: false,\n        error: error.message\n      });\n    }\n  }\n}; "],"names":["self","onmessage","async","e","type","chunkIndex","url","data","response","fetch","chunkData","blob","chunks","Map","set","postMessage","success","error","message"],"sourceRoot":""}